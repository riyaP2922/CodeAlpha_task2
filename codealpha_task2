{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22118,"status":"ok","timestamp":1736498986088,"user":{"displayName":"Riya Patil","userId":"17747019847202775396"},"user_tz":-330},"id":"nk9fRe3NmwxI","outputId":"0ddf1469-af20-4714-9b77-5072ebc34b55"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading from https://www.kaggle.com/api/v1/datasets/download/ananthu017/emotion-detection-fer?dataset_version_number=1...\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 65.2M/65.2M [00:00<00:00, 82.6MB/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting files...\n"]},{"output_type":"stream","name":"stderr","text":["\n"]},{"output_type":"stream","name":"stdout","text":["Path to dataset files: /root/.cache/kagglehub/datasets/ananthu017/emotion-detection-fer/versions/1\n"]}],"source":["import kagglehub\n","\n","# Download latest version\n","path = kagglehub.dataset_download(\"ananthu017/emotion-detection-fer\")\n","\n","print(\"Path to dataset files:\", path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KGWfcaHmm2Vi"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import os\n","import cv2\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D\n","from tensorflow.keras.utils import to_categorical\n","import matplotlib.pyplot as plt\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":537,"status":"ok","timestamp":1736498999485,"user":{"displayName":"Riya Patil","userId":"17747019847202775396"},"user_tz":-330},"id":"liYfBRwwm2cs","outputId":"53b9fa76-a733-4457-cf97-60c3ed7e5694"},"outputs":[{"output_type":"stream","name":"stdout","text":["['test', 'train']\n"]}],"source":["import os\n","\n","# List the contents of the directory where the dataset is extracted\n","dataset_directory = '/root/.cache/kagglehub/datasets/ananthu017/emotion-detection-fer/versions/1'\n","print(os.listdir(dataset_directory))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"O7LLAxPquP3N"},"outputs":[],"source":["def load_images_from_folder(folder):\n","    images = []\n","    labels = []\n","    for emotion in os.listdir(folder):\n","        emotion_folder = os.path.join(folder, emotion)\n","        for filename in os.listdir(emotion_folder):\n","            img_path = os.path.join(emotion_folder, filename)\n","            img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n","            if img is not None:\n","                img = cv2.resize(img, (48, 48))\n","                images.append(img)\n","                labels.append(emotion)\n","    return images, labels\n","\n","train_folder = '/root/.cache/kagglehub/datasets/ananthu017/emotion-detection-fer/versions/1/train'\n","test_folder = '/root/.cache/kagglehub/datasets/ananthu017/emotion-detection-fer/versions/1/test'\n","\n","train_images, train_labels = load_images_from_folder(train_folder)\n","test_images, test_labels = load_images_from_folder(test_folder)\n","\n","# Convert to numpy arrays\n","X_train = np.array(train_images)\n","y_train = np.array(train_labels)\n","X_test = np.array(test_images)\n","y_test = np.array(test_labels)\n","\n","# Normalize pixel values\n","X_train = X_train / 255.0\n","X_test = X_test / 255.0\n","\n","# Reshape data for model input\n","X_train = X_train.reshape(-1, 48, 48, 1)\n","X_test = X_test.reshape(-1, 48, 48, 1)\n","\n","# Encode labels\n","label_encoder = LabelEncoder()\n","y_train_encoded = label_encoder.fit_transform(y_train)\n","y_test_encoded = label_encoder.transform(y_test)\n","\n","# Convert labels to one-hot encoding\n","y_train_categorical = to_categorical(y_train_encoded)\n","y_test_categorical = to_categorical(y_test_encoded)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RRitAQOLvYGl"},"outputs":[],"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D, Input\n","\n","# ... (Your previous code to load and preprocess data) ...\n","\n","# Define the model\n","model = Sequential()\n","# Add an Input layer to define the input shape\n","model.add(Input(shape=(48, 48, 1)))\n","model.add(Conv2D(32, kernel_size=(3, 3), activation='relu')) # Remove input_shape here\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(Dropout(0.25))\n","model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(Dropout(0.25))\n","model.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(Dropout(0.25))\n","model.add(Flatten())\n","model.add(Dense(256, activation='relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(y_train_categorical.shape[1], activation='softmax'))\n","\n","# Compile the model\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Aw9SMOCbuP6q","executionInfo":{"status":"ok","timestamp":1736502915660,"user_tz":-330,"elapsed":1121070,"user":{"displayName":"Riya Patil","userId":"17747019847202775396"}},"outputId":"ffb64978-2a93-420d-c30c-d82132753f2b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m91s\u001b[0m 246ms/step - accuracy: 0.2126 - loss: 1.7126 - val_accuracy: 0.0592 - val_loss: 3.9784\n","Epoch 2/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m90s\u001b[0m 249ms/step - accuracy: 0.3261 - loss: 1.5847 - val_accuracy: 0.3074 - val_loss: 5.1192\n","Epoch 3/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 246ms/step - accuracy: 0.4045 - loss: 1.4600 - val_accuracy: 0.3147 - val_loss: 4.9353\n","Epoch 4/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m143s\u001b[0m 250ms/step - accuracy: 0.4434 - loss: 1.3830 - val_accuracy: 0.3029 - val_loss: 6.2249\n","Epoch 5/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 249ms/step - accuracy: 0.4630 - loss: 1.3408 - val_accuracy: 0.3278 - val_loss: 7.5580\n","Epoch 6/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 248ms/step - accuracy: 0.4935 - loss: 1.2761 - val_accuracy: 0.3210 - val_loss: 7.0695\n","Epoch 7/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m89s\u001b[0m 249ms/step - accuracy: 0.5080 - loss: 1.2381 - val_accuracy: 0.3210 - val_loss: 7.3812\n","Epoch 8/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m140s\u001b[0m 244ms/step - accuracy: 0.5188 - loss: 1.2165 - val_accuracy: 0.3267 - val_loss: 7.9492\n","Epoch 9/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m145s\u001b[0m 251ms/step - accuracy: 0.5349 - loss: 1.1807 - val_accuracy: 0.3572 - val_loss: 7.8401\n","Epoch 10/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m89s\u001b[0m 248ms/step - accuracy: 0.5498 - loss: 1.1525 - val_accuracy: 0.3466 - val_loss: 8.2384\n","Epoch 11/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m88s\u001b[0m 246ms/step - accuracy: 0.5557 - loss: 1.1374 - val_accuracy: 0.3460 - val_loss: 8.7795\n","Epoch 12/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m143s\u001b[0m 249ms/step - accuracy: 0.5627 - loss: 1.1257 - val_accuracy: 0.3445 - val_loss: 9.6223\n","Epoch 13/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m143s\u001b[0m 253ms/step - accuracy: 0.5673 - loss: 1.0951 - val_accuracy: 0.3563 - val_loss: 9.9016\n","Epoch 14/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m144s\u001b[0m 259ms/step - accuracy: 0.5732 - loss: 1.0903 - val_accuracy: 0.3443 - val_loss: 10.4544\n","Epoch 15/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m138s\u001b[0m 249ms/step - accuracy: 0.5762 - loss: 1.0785 - val_accuracy: 0.3638 - val_loss: 10.1905\n","Epoch 16/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 248ms/step - accuracy: 0.5868 - loss: 1.0480 - val_accuracy: 0.3509 - val_loss: 9.9105\n","Epoch 17/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m140s\u001b[0m 243ms/step - accuracy: 0.5941 - loss: 1.0385 - val_accuracy: 0.3602 - val_loss: 10.7845\n","Epoch 18/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m145s\u001b[0m 251ms/step - accuracy: 0.6027 - loss: 1.0219 - val_accuracy: 0.3380 - val_loss: 10.6260\n","Epoch 19/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m89s\u001b[0m 247ms/step - accuracy: 0.6047 - loss: 1.0132 - val_accuracy: 0.3516 - val_loss: 11.0313\n","Epoch 20/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 249ms/step - accuracy: 0.6182 - loss: 0.9875 - val_accuracy: 0.3485 - val_loss: 11.5890\n","Epoch 21/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m140s\u001b[0m 243ms/step - accuracy: 0.6202 - loss: 0.9818 - val_accuracy: 0.3568 - val_loss: 11.4329\n","Epoch 22/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m89s\u001b[0m 248ms/step - accuracy: 0.6308 - loss: 0.9512 - val_accuracy: 0.3497 - val_loss: 12.1870\n","Epoch 23/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 245ms/step - accuracy: 0.6312 - loss: 0.9469 - val_accuracy: 0.3629 - val_loss: 11.9807\n","Epoch 24/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m89s\u001b[0m 247ms/step - accuracy: 0.6360 - loss: 0.9382 - val_accuracy: 0.3525 - val_loss: 13.2641\n","Epoch 25/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 245ms/step - accuracy: 0.6433 - loss: 0.9188 - val_accuracy: 0.3579 - val_loss: 13.2282\n","Epoch 26/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m90s\u001b[0m 250ms/step - accuracy: 0.6490 - loss: 0.9117 - val_accuracy: 0.3574 - val_loss: 12.0324\n","Epoch 27/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m140s\u001b[0m 245ms/step - accuracy: 0.6476 - loss: 0.9098 - val_accuracy: 0.3624 - val_loss: 13.3617\n","Epoch 28/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m144s\u001b[0m 251ms/step - accuracy: 0.6491 - loss: 0.9003 - val_accuracy: 0.3602 - val_loss: 14.0176\n","Epoch 29/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m89s\u001b[0m 248ms/step - accuracy: 0.6567 - loss: 0.8879 - val_accuracy: 0.3567 - val_loss: 15.3837\n","Epoch 30/30\n","\u001b[1m359/359\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m143s\u001b[0m 250ms/step - accuracy: 0.6616 - loss: 0.8709 - val_accuracy: 0.3588 - val_loss: 15.8845\n"]}],"source":["# Train the model\n","history = model.fit(X_train, y_train_categorical, epochs=30, batch_size=64, validation_split=0.2)\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":219},"id":"sjsoguyuuP-O","outputId":"de2f48da-7924-49cd-f9ea-23dc9d09d0d5","executionInfo":{"status":"error","timestamp":1736582631995,"user_tz":-330,"elapsed":726,"user":{"displayName":"Riya Patil","userId":"17747019847202775396"}}},"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'model' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-a091208ff85b>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Evaluate the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test_categorical\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Test Accuracy: {accuracy * 100:.2f}%'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Plot training history\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}],"source":["# Evaluate the model\n","loss, accuracy = model.evaluate(X_test, y_test_categorical)\n","print(f'Test Accuracy: {accuracy * 100:.2f}%')\n","\n","# Plot training history\n","plt.plot(history.history['accuracy'], label='accuracy')\n","plt.plot(history.history['val_accuracy'], label='val_accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()\n"]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOP8s1FEepFkVkT0mOTUBEW"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}